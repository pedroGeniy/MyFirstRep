{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOPhngWWgA13x09NmF8tLhx",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pedroGeniy/MyFirstRep/blob/main/Untitled11.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Задание на автомат №2\n",
        "\n",
        "Вариант №4\n",
        "\n",
        "Сложный вариант"
      ],
      "metadata": {
        "id": "PD1sQeknmgxl"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "ukkTg4tQmeur",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "32ca546c-a28e-4931-d7da-a3a2eec1060a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at ./sample_data/drive; to attempt to forcibly remount, call drive.mount(\"./sample_data/drive\", force_remount=True).\n",
            "Вас приветствует лучшая программа по анализу осадков\n",
            "Вашему вниманию предаставляются следующие действия:\n",
            "1\n",
            "Ввести два списка с клавиатуры, сохранить и вывести из MySQL.\n",
            "2\n",
            "Выполнение всех операций из базового варианта, сохранение результатов и вывод из MySQL (тоже в виде\n",
            "таблицы).\n",
            "3\n",
            "Сохранить данные из MySQL в Excel и вывести на экран.\n",
            "\n",
            "Итак, какое действие вы выбрали3\n",
            "   id month  osadki\n",
            "0   1   янв    12.0\n",
            "1   2   фев    13.0\n"
          ]
        }
      ],
      "source": [
        "import sqlite3\n",
        "import pandas as pd\n",
        "from google.colab import drive\n",
        "drive.mount('./sample_data/drive')\n",
        "path='./sample_data/drive/MyDrive/avtomat/avtomat.db'\n",
        "\n",
        "print('''Вас приветствует лучшая программа по анализу осадков\n",
        "Вашему вниманию предаставляются следующие действия:\n",
        "1\n",
        "Ввести два списка с клавиатуры, сохранить и вывести из MySQL.\n",
        "2\n",
        "Выполнение всех операций из базового варианта, сохранение результатов и вывод из MySQL (тоже в виде\n",
        "таблицы).\n",
        "3\n",
        "Сохранить данные из MySQL в Excel и вывести на экран.\n",
        "''')\n",
        "s=input('Итак, какое действие вы выбрали')\n",
        "if s=='1':\n",
        " input_string1 = input('Введите список месяцев ')\n",
        " input_list1 = input_string1.split(\",\")\n",
        "\n",
        " input_string2 = input('Введите количество осадков соответственно каждому месяцу ')\n",
        " input_list2 = input_string2.split(\",\")\n",
        "\n",
        " conn=sqlite3.connect(path)\n",
        " cursor=conn.cursor()\n",
        " cursor.execute('''CREATE TABLE IF NOT EXISTS osadkii\n",
        "             (id INTEGER PRIMARY KEY, month TEXT, osadki FLOAT)''')\n",
        "\n",
        " for i in range(len(input_list1)):\n",
        "     cursor.execute(\"INSERT INTO osadkii (month, osadki) VALUES (?, ?)\", (input_list1[i], input_list2[i]))\n",
        "\n",
        " conn.commit()\n",
        " df = pd.read_sql_query(\"SELECT * from osadkii\", conn)\n",
        " display(df)\n",
        "\n",
        "if s=='2':\n",
        "  print('''чтож, для этого вам всё равно придется внести два списка с клавиатуры,\n",
        "если, конечно, вы не хотите быть ботом, который может выполнять лишь определенный перечень задач с заданными значениями''')\n",
        "  \n",
        "  def osadki_table(months, osadki):\n",
        "    avr_osadki = sum(osadki) / len(osadki)\n",
        "    print(' Месяц   Осадки   Отклонение')\n",
        "    for i, (month, osadki) in enumerate(zip(months, osadki), 1):\n",
        "        deviation = abs(osadki - avr_osadki)\n",
        "        print('%2d %-8s %5.1f %10.1f' % (i, month, osadki, deviation))\n",
        "        conn = sqlite3.connect(path)\n",
        "        cursor = conn.cursor()\n",
        "        cursor.execute('''CREATE TABLE IF NOT EXISTS osadkii\n",
        "             (i INTEGER PRIMARY KEY, month TEXT, osadki FLOAT, deviation FLOAT)''')\n",
        "        cursor.execute(\"INSERT INTO osadkii VALUES (?, ?, ?, ?)\", (i, month, osadki, deviation))\n",
        "        conn.commit()\n",
        "        conn.close()\n",
        "\n",
        "  input_string1 = input('Введите список месяцев ')\n",
        "  input_list1 = input_string1.split(\",\")\n",
        "  input_string2 = input('Введите количество осадков соответственно каждому месяцу ')\n",
        "  input_list2 = input_string2.split(\",\")\n",
        "\n",
        "  months = input_list1\n",
        "  osadki = [float(x) for x in input_list2]\n",
        "  osadki_table(months, osadki)\n",
        "\n",
        "if s=='3':\n",
        "  conn = sqlite3.connect(path)\n",
        "  df = pd.read_sql_query('SELECT * FROM osadkii', conn)\n",
        "  df.to_excel('output.xlsx', index=False)\n",
        "  print(df)\n",
        "  conn.close()\n",
        "  \n",
        " "
      ]
    }
  ]
}
